#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun May 22 07:30:57 2011

import wx

# begin wxGlade: extracode
# end wxGlade

class pyWine(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: pyWine.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.wineView = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.wineView.Show(True)

        # Here is a list that can be reused later
        cs = ["ワイン", "ワイナリー", "グレープの種類", "製造年"]
        # Add all ot the List Columns to the wineView
        for i in range(len(cs)):
            self.wineView.InsertColumn(i, cs[i])
        
        # Menu Bar
        self.PyWine_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.NewId(), u"ワイン", "", wx.ITEM_NORMAL)
        self.PyWine_menubar.Append(wxglade_tmp_menu, u"追加")
        self.SetMenuBar(self.PyWine_menubar)
        # Menu Bar end
        
        # Tool Bar
        self.PyWine_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.PyWine_toolbar)
        self.PyWine_toolbar.AddLabelTool(wx.ID_NEW, u"ワインの追加", wx.Bitmap("/usr/share/icons/gnome/24x24/actions/add.png", wx.BITMAP_TYPE_ANY), wx.Bitmap("/usr/share/icons/gnome/24x24/actions/remove.png", wx.BITMAP_TYPE_ANY), wx.ITEM_NORMAL, "", "")
        # Tool Bar end
        self.PyWine_statusbar = self.CreateStatusBar(1, 0)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.on_AddWine, id=-1)
        self.Bind(wx.EVT_TOOL, self.on_AddWine, id=-1)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: pyWine.__set_properties
        self.SetTitle("PyWine")
        self.PyWine_toolbar.Realize()
        self.PyWine_statusbar.SetStatusWidths([-1])
        # statusbar fields
        PyWine_statusbar_fields = ["PyWine_statusbar"]
        for i in range(len(PyWine_statusbar_fields)):
            self.PyWine_statusbar.SetStatusText(PyWine_statusbar_fields[i], i)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: pyWine.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.wineView, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def on_AddWine(self, event): # wxGlade: pyWine.<event_handler>
        wineDlg = wineDialog(None, -1, "")
        wineDlg.ShowModal()
        if wineDlg == wx.OK:
            """The user clicked Ok, so let's add this
            wine to the wine list"""
            wineDlg.run()
            newWine = Wine.getList()
            for i in range(len(newWine)):
                if i == 0:
                    pos = self.wineView.SetStringItem(i, newWine[i])
                else:
                    self.wineView.SetStringItem(pos, i, newWine[i])
        wineDlg.Destroy()
# end of class pyWine


class wineDialog(wx.Dialog):
    
    def __init__(self, *args, **kwds):
        # begin wxGlade: wineDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, u"ワイン")
        self.enWine = wx.TextCtrl(self, -1, "")
        self.label_2 = wx.StaticText(self, -1, u"ワイナリー")
        self.enWinery = wx.TextCtrl(self, -1, "")
        self.label_3 = wx.StaticText(self, -1, u"グレープの種類")
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "")
        self.label_4 = wx.StaticText(self, -1, u"製造年")
        self.enYear = wx.TextCtrl(self, -1, "")
        self.Cancel = wx.Button(self, wx.ID_CANCEL, "")
        self.OK = wx.Button(self, wx.ID_OK, "")
        
        self.wine = Wine()

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: wineDialog.__set_properties
        self.SetTitle("Add Wine")
        self.Cancel.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: wineDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(4, 2, 0, 0)
        grid_sizer_1.Add(self.label_1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.enWine, 2, wx.ALL|wx.EXPAND, 3)
        grid_sizer_1.Add(self.label_2, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.enWinery, 2, wx.ALL|wx.EXPAND, 3)
        grid_sizer_1.Add(self.label_3, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.text_ctrl_1, 2, wx.ALL|wx.EXPAND, 3)
        grid_sizer_1.Add(self.label_4, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_1.Add(self.enYear, 2, wx.ALL|wx.EXPAND, 3)
        sizer_2.Add(grid_sizer_1, 4, wx.EXPAND, 0)
        sizer_3.Add((97, 29), 0, 0, 0)
        sizer_3.Add(self.Cancel, 0, 0, 0)
        sizer_3.Add(self.OK, 0, 0, 0)
        sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade

    def run(self, event):
        # store the response
        # get the velue of the entry fields
        self.wine.wine = self.enWine.GetVelue().encode('utf_8')
        self.wine.winery = self.enWinery.GetVelue().encode('utf_8')
        self.wine.grape = self.enGrape.GetValue().encode('utf_8')
        self.wine.year = self.enYear.GetVelue().encode('utf_8')

        return self.wine
        
class Wine:
    """This class represents all the wine inbormation"""

    def __init__(self, wine = "", winery = "", grape = "", year = ""):
        self.wine = wine
        self.winery = winery
        self.grape = grape
        self.year = year

    def getList(self):
        """This method returns a list made up of the
        wine information. It is used to add a wine to the
        wineList easily"""
        return [self.wine, self.winery, self.grape, self.year]


# end of class wineDialog


if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    pywine = pyWine(None, -1, "")
    app.SetTopWindow(pywine)
    pywine.Show()
    app.MainLoop()
